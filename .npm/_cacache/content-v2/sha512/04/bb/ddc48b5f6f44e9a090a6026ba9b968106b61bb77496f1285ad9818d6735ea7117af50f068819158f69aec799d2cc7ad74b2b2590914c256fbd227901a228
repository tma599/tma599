{"_id":"leac","_rev":"5-fc7886f10ff843bfb3624e6e0e3656d9","name":"leac","dist-tags":{"latest":"0.7.0-preview.1"},"versions":{"0.5.0":{"name":"leac","version":"0.5.0","keywords":["lexer","tokenizer","lex","token"],"author":{"name":"KillyMXI"},"license":"MIT","_id":"leac@0.5.0","maintainers":[{"name":"killy.mxi","email":"killy.mxi@gmail.com"}],"homepage":"https://github.com/mxxii/leac","bugs":{"url":"https://github.com/mxxii/leac/issues"},"ava":{"files":["test/**/*"],"verbose":true,"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm","--experimental-specifier-resolution=node"],"nonSemVerExperiments":{"configurableModuleFormat":true}},"dist":{"shasum":"e7b1b13e500ec8b1cb1a05e05a4538e73dfdbb68","tarball":"https://registry.npmjs.org/leac/-/leac-0.5.0.tgz","fileCount":7,"integrity":"sha512-J2/U9/PVJ3P6b0tT5qKPoFYNs8MWTs8U5EiKo1wTdVFwjmDbEdxTKM1OUbjUPL7KPwepqmaxDvgxWovrA7qH3w==","signatures":[{"sig":"MEQCIEkKYLG+/5aCZyKBLztmhDEscVdQZBzasppqjgpZ+qJfAiBTRuG4bwayawuxh5uch2pigugE5LcLaiQjB/ieG8BHQA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":15012,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2xpxCRA9TVsSAnZWagAA3wcP/2F6dmlvyt3mbXM/91SD\n3c/In4k3olsoIHqdCwX46jVrWADPkQo0Hy3iGmbuoj7QYB8ZTkV2ypRAtzcz\nXE4p1WVr32TSlyafjZQGrnwAshcst/V6PT7R6jzLH6QrVSjp+2UFSQovQdC0\nI1vTMtBmzfh2QjYEYJjYd1WbvRQxNhAhCBM9n/VkOk84gJ8StwjHI0Mm90yI\n1Hfcwg4KKbKyAvCh7U44bZBqYkFqhOuehufmC8O/xSxejjjFZhajUAdSoLkg\nzvqk4JIw4g/laD5HJ479gWGo1dZKy0e4VnOT3osjeUmJIQVwtJM5L6/5lqI0\nu+KtYOQDeXqq6DrwsVanTaPxIy+whIi3N5e1PQS4Xp5+I+51kxhFsSeKsAJd\nd9Y77aY2cNCoLnQASWBMzaq9xLGQhKXkViLOX1GiFn72nY5HtC0tJnIi6Knc\nOzKmhxF9SvC5/pkRPhmWyVfi53Q+NBP+rI12LnzMR9lYX1lvhM5aJOmPBumX\nG8UMCm9O8LgTjSiTKbP4YTPzpolE9j6chOeG9LfhsE6hiCxPeG2d+1RY8xIz\nHTOHsbi/xUXtmhk9Lb/5oa5dyByctKsFP0Hox/UN4v0Ab6cgniPaqRE6YP1P\nKUdn9dkdVT/Mf6RMMFpsfoKV6cP6j8JqblddnoiXU37aZ1c093lxo39z1N39\nnLtb\r\n=Qiox\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib/leac.cjs","type":"module","types":"./lib/leac.d.ts","module":"./lib/leac.mjs","denoify":{"out":"./deno"},"exports":{"import":"./lib/leac.mjs","require":"./lib/leac.cjs"},"funding":"https://ko-fi.com/killymxi","gitHead":"42dd2e05dd36b24daacfe783f0db153bc6115658","scripts":{"ts":"node --experimental-specifier-resolution=node --loader ts-node/esm","lint":"concurrently npm:lint:*","test":"ava","build":"npm run clean && concurrently npm:build:*","clean":"rimraf lib && rimraf docs && rimraf deno","lint:md":"markdownlint-cli2","checkAll":"npm run lint && npm test","build:deno":"denoify","build:docs":"typedoc","build:types":"tsc --declaration --emitDeclarationOnly && rimraf lib/!(leac).d.ts","lint:eslint":"eslint .","build:rollup":"rollup -c","example:calc":"npm run ts -- ./examples/calc.ts","example:json":"npm run ts -- ./examples/json.ts","prepublishOnly":"npm run build && npm run checkAll"},"_npmUser":{"name":"killy.mxi","email":"killy.mxi@gmail.com"},"repository":{"url":"git+https://github.com/mxxii/leac.git","type":"git"},"_npmVersion":"6.14.11","description":"Lexer / tokenizer","directories":{},"_nodeVersion":"12.21.0","dependencies":{},"_hasShrinkwrap":false,"devDependencies":{"ava":"^3.15.0","tslib":"^2.3.1","eslint":"^7.32.0","rimraf":"^3.0.2","rollup":"^2.58.3","denoify":"^0.10.5","ts-node":"^10.4.0","typedoc":"^0.22.7","typescript":"~4.4.4","@types/node":"12.20.25","concurrently":"^6.3.0","@tsconfig/node12":"^1.0.9","markdownlint-cli2":"^0.3.2","eslint-plugin-jsonc":"^1.7.0","eslint-plugin-tsdoc":"^0.2.14","rollup-plugin-terser":"^7.0.2","typedoc-plugin-markdown":"^3.11.3","@rollup/plugin-typescript":"^8.3.0","@typescript-eslint/parser":"^4.33.0","@typescript-eslint/eslint-plugin":"^4.33.0"},"_npmOperationalInternal":{"tmp":"tmp/leac_0.5.0_1635253010015_0.20704027096023436","host":"s3://npm-registry-packages"}},"0.5.1":{"name":"leac","version":"0.5.1","keywords":["lexer","tokenizer","lex","token"],"author":{"name":"KillyMXI"},"license":"MIT","_id":"leac@0.5.1","maintainers":[{"name":"killy.mxi","email":"killy.mxi@gmail.com"}],"homepage":"https://github.com/mxxii/leac","bugs":{"url":"https://github.com/mxxii/leac/issues"},"ava":{"files":["test/**/*"],"verbose":true,"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm","--experimental-specifier-resolution=node"]},"dist":{"shasum":"bac40e7a68ac0f979cd46784abba821a0e84989c","tarball":"https://registry.npmjs.org/leac/-/leac-0.5.1.tgz","fileCount":7,"integrity":"sha512-ItrUZwFdQSJT5sHceYI8qQif98Sc1XV0kLhn0aWpE4f82B+FICsF4egayLMS1iCHxNKWLbvK6DQNaRSTAbjnYA==","signatures":[{"sig":"MEUCIAJG+kEKUiRfwPVugEUoniAk8WAmcG59waA+3Z+1+bEaAiEAt/FNIwP5KGrn62XAfEtdvCaC4Zt83bb0axnOA8YgBBE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":18130,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8/ClCRA9TVsSAnZWagAAvRgP/jj+OzIZRTlGrTcEW9FC\nYoK5ki4cd0M45T9TrVutw0JmZsv9MEqpNcRsXIAleTI1iiweLTMCXVyQKqhv\nXXkjYvRtdzwk8qRF1//gp0N1m/o+rxmqfC/YoLsadqYuH+X1yBqVoleW1Mq3\n3nO9aG5qfLRUPFlTIxm8/SqeSTf/Mgle6CSVV9xWQjXF9WnCUmwi5kus27Ss\nyKjiOH07YJcS7kPh1sKWDdFtYDJum2hph2kqJE0Bz4SqFdr72RY22sOgBHMY\nTmRsrbkHylvNaWNmd6dczzc24+XOq87cYaVdYjdCYmfLbpDK3hvpmpz3DRX9\nBKKkBzKx5Y4uBBRzRvI6UXzy3fVncJUCQxZRl/2ZyB5Xqf1AzlRQOoxf+E4/\na/lhKuJMLdBVs0wVz1gKFR1z39AcBQeqQ95kjfCut0wqXzk1bmNpfJtbARbN\nniqQcfctmM87QXae69295Qpb/JFRor4Rp9Mot638x+UCiarxTsV4AQC0V+vP\nY69VN/zYE+vAQSAiBzIDWiw6ERk5MhahuSTg0vXOT1ZrpU7MFJjRn8r0ALZM\nc10skTMx8Ywoba4X5tMf2JEi7Zqfb1qymVXVhYpRWkcjUhKRCV5prJPZLJwQ\nw1gwdkfuIE+94TQJLFqVyRS5uvUYFMRGD75N0iICCPm9VCkj0ImbBqyY46Xv\npfel\r\n=nj8T\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib/leac.cjs","type":"module","types":"./lib/leac.d.ts","module":"./lib/leac.mjs","denoify":{"out":"./deno"},"exports":{"import":"./lib/leac.mjs","require":"./lib/leac.cjs"},"funding":"https://ko-fi.com/killymxi","gitHead":"62349f42488069d6c3b0bfd8b48e0b153658fde0","scripts":{"ts":"node --experimental-specifier-resolution=node --loader ts-node/esm","lint":"concurrently npm:lint:*","test":"ava","build":"npm run clean && concurrently npm:build:*","clean":"rimraf lib && rimraf docs && rimraf deno","lint:md":"markdownlint-cli2","checkAll":"npm run lint && npm test","build:deno":"denoify","build:docs":"typedoc","build:types":"tsc --declaration --emitDeclarationOnly && rimraf lib/!(leac).d.ts","lint:eslint":"eslint .","build:rollup":"rollup -c","example:calc":"npm run ts -- ./examples/calc.ts","example:json":"npm run ts -- ./examples/json.ts","prepublishOnly":"npm run build && npm run checkAll"},"_npmUser":{"name":"killy.mxi","email":"killy.mxi@gmail.com"},"repository":{"url":"git+https://github.com/mxxii/leac.git","type":"git"},"_npmVersion":"6.14.15","description":"Lexer / tokenizer","directories":{},"_nodeVersion":"12.22.6","dependencies":{},"_hasShrinkwrap":false,"devDependencies":{"ava":"^4.0.1","tslib":"^2.3.1","eslint":"^8.7.0","rimraf":"^3.0.2","rollup":"^2.66.1","denoify":"^0.11.0","ts-node":"^10.4.0","typedoc":"^0.22.11","typescript":"~4.5.5","@types/node":"12.20.42","concurrently":"^7.0.0","@tsconfig/node12":"^1.0.9","markdownlint-cli2":"^0.4.0","eslint-plugin-jsonc":"^2.1.0","eslint-plugin-tsdoc":"^0.2.14","rollup-plugin-terser":"^7.0.2","typedoc-plugin-markdown":"^3.11.12","@rollup/plugin-typescript":"^8.3.0","@typescript-eslint/parser":"^5.10.1","@typescript-eslint/eslint-plugin":"^5.10.1"},"_npmOperationalInternal":{"tmp":"tmp/leac_0.5.1_1643376805127_0.9115748220576727","host":"s3://npm-registry-packages"}},"0.6.0":{"name":"leac","version":"0.6.0","keywords":["lexer","tokenizer","lex","token"],"author":{"name":"KillyMXI"},"license":"MIT","_id":"leac@0.6.0","maintainers":[{"name":"killy.mxi","email":"killy.mxi@gmail.com"}],"homepage":"https://github.com/mxxii/leac","bugs":{"url":"https://github.com/mxxii/leac/issues"},"ava":{"files":["test/**/*"],"verbose":true,"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm","--experimental-specifier-resolution=node"]},"dist":{"shasum":"dcf136e382e666bd2475f44a1096061b70dc0912","tarball":"https://registry.npmjs.org/leac/-/leac-0.6.0.tgz","fileCount":7,"integrity":"sha512-y+SqErxb8h7nE/fiEX07jsbuhrpO9lL8eca7/Y1nuWV2moNlXhyd59iDGcRf6moVyDMbmTNzL40SUyrFU/yDpg==","signatures":[{"sig":"MEUCIQC8w/aNhNmM3gePfW/OFnce59eCmrn2Fw442UoIfwqfYQIgBxGXSzRUbr0ruLON/sXc4m1NQGY9wse4yenLURa0q08=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":18267,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi/oJBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpO0hAAjSxjtO6pdrWYtfosC2EGz906xS/VUY9i6A4gv6t4Huob8xEN\r\nPvOGRTlT2Th6m4CCwhO1fE6BaT5jeNvdTslDKeHHTb0rf8RXgUFb4oUyfNcY\r\nJWhgTSXKZssFoummO9MHT+mVLvwvyDdSSCS/gYLOTzjPi/Wg7DjpbCMYo/9n\r\nuHYKDfCFcRLUzFjViuztZQsgEv3UZm2OJ6iCroLHP03flC+P+fUeCyvyY6FX\r\nUMcpD4yiowpnSJ1hPP0nF2AM3B1mnKDKYax2d49tTBXumYE/hEqVxYJdDVb/\r\nF1g+uRu/5R53ytQPjlWxdiq/yx2BTnMkmXgchTP5r2TU/g1NLxKg+5KIue+y\r\nnUujheMBY8xCkq12A7Y5LpyaqOR50pF9Jl70jwfae/i23v8OMVAnmxl9pNtB\r\nJX3hAVVtbmgTHJIcgF8GWTpZYlIHBOmn+OtEW5JApjAGe51P5QLoEuRy7gmT\r\nNHKBy/4IV+8NEuxtkdp1e4+AWmlk07rFTqMi/aZyvzHngt7Cq1ov1KvB2n8c\r\nx7+8hEF415fwZU9vKup7oTvh/W2ejdxyB74WE4gYsaDYG3tXb9gU8UsPSrC3\r\n2pLuxVugk0PJIYpM8DCPGXSAv+uloBvnuvynlJcpHe76meOVepgB0t2SkD3G\r\ndqu/Dvl9IZ2xNhWPiXIyosIS/Lv5ixZWsE8=\r\n=SsEI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib/leac.cjs","type":"module","types":"./lib/leac.d.ts","module":"./lib/leac.mjs","denoify":{"out":"./deno"},"exports":{"import":"./lib/leac.mjs","require":"./lib/leac.cjs"},"funding":"https://ko-fi.com/killymxi","gitHead":"574bf2e08f8b5233e545726a7aeca465eb6f9354","scripts":{"ts":"node --experimental-specifier-resolution=node --loader ts-node/esm","lint":"concurrently npm:lint:*","test":"ava","build":"npm run clean && concurrently npm:build:*","clean":"rimraf lib && rimraf docs && rimraf deno","lint:md":"markdownlint-cli2","checkAll":"npm run lint && npm test","build:deno":"denoify","build:docs":"typedoc","build:types":"tsc --declaration --emitDeclarationOnly && rimraf lib/!(leac).d.ts","lint:eslint":"eslint .","build:rollup":"rollup -c","example:calc":"npm run ts -- ./examples/calc.ts","example:json":"npm run ts -- ./examples/json.ts","prepublishOnly":"npm run build && npm run checkAll"},"_npmUser":{"name":"killy.mxi","email":"killy.mxi@gmail.com"},"repository":{"url":"git+https://github.com/mxxii/leac.git","type":"git"},"_npmVersion":"6.14.17","description":"Lexer / tokenizer","directories":{},"_nodeVersion":"14.20.0","dependencies":{},"_hasShrinkwrap":false,"devDependencies":{"ava":"^4.3.1","tslib":"^2.4.0","eslint":"^8.22.0","rimraf":"^3.0.2","rollup":"^2.78.0","denoify":"^1.0.0","ts-node":"^10.9.1","typedoc":"~0.22.18","typescript":"~4.7.4","@types/node":"14.18.23","concurrently":"^7.3.0","@tsconfig/node14":"^1.0.3","markdownlint-cli2":"^0.5.1","eslint-plugin-jsonc":"^2.4.0","eslint-plugin-tsdoc":"^0.2.16","rollup-plugin-terser":"^7.0.2","typedoc-plugin-markdown":"~3.12.1","@rollup/plugin-typescript":"^8.3.4","@typescript-eslint/parser":"^5.33.1","@typescript-eslint/eslint-plugin":"^5.33.1"},"_npmOperationalInternal":{"tmp":"tmp/leac_0.6.0_1660846656891_0.8122563498673598","host":"s3://npm-registry-packages"}},"0.7.0-preview.1":{"name":"leac","version":"0.7.0-preview.1","description":"Lexer / tokenizer","keywords":["lexer","tokenizer","lex","token"],"repository":{"type":"git","url":"git+https://github.com/mxxii/leac.git"},"bugs":{"url":"https://github.com/mxxii/leac/issues"},"homepage":"https://github.com/mxxii/leac","author":{"name":"KillyMXI"},"funding":"https://github.com/sponsors/KillyMXI","license":"MIT","exports":{".":{"import":{"types":"./lib/leac.d.mts","default":"./lib/leac.mjs"},"require":{"types":"./lib/leac.d.cts","default":"./lib/leac.cjs"}},"./package.json":"./package.json"},"type":"module","main":"./lib/leac.cjs","module":"./lib/leac.mjs","types":"./lib/leac.d.cts","scripts":{"benchmark:js":"node ./benchmarks/benchmark.js","benchmark:ts":"tsimp ./benchmarks/benchmark.ts","benchmark":"npm run benchmark:ts && npm run benchmark:js","build:docs":"typedoc","build:deno":"denoify && replace-in-file \"/\\.ts\\/index.ts/g\" \".ts\" deno/**/*.ts","build:rollup":"rollup -c","build":"npm run clean && npm run build:rollup && npm run build:docs && npm run build:deno","check:all":"npm run check:tsc && npm run lint && npm test","check:tsc":"tsc","clean":"rimraf lib && rimraf docs && rimraf deno","example:calc":"tsimp ./examples/calc.ts","example:json":"tsimp ./examples/json.ts","lint:eslint":"eslint .","lint:md":"markdownlint-cli2","lint":"npm run lint:eslint && npm run lint:md","prepublishOnly":"npm run build && npm run check:all","test":"npm run test:ava-c8","test:ava":"ava","test:ava-c8":"c8 ava"},"devDependencies":{"@rollup/plugin-typescript":"^12.1.2","@stylistic/eslint-plugin":"^4.0.1","@tsconfig/node18":"^18.2.4","@types/node":"18.19.76","@typescript-eslint/eslint-plugin":"^8.25.0","ava":"^6.2.0","c8":"^10.1.3","denoify":"^1.6.16","eslint":"^9.21.0","eslint-plugin-jsonc":"^2.19.1","eslint-plugin-tsdoc":"^0.4.0","iso-bench":"^2.4.7","markdownlint-cli2":"^0.17.2","replace-in-file":"^8.3.0","rimraf":"^6.0.1","rollup":"^4.34.8","rollup-plugin-delete":"^3.0.0","rollup-plugin-dts":"^6.1.1","ts-blank-space":"^0.6.0","tsimp":"^2.0.12","typedoc":"~0.27.9","typedoc-plugin-markdown":"~4.4.2","typescript":"~5.7.3","typescript-eslint":"^8.25.0"},"ava":{"extensions":{"ts":"module"},"files":["test/**/*"],"nodeArguments":["--import=ts-blank-space/register"],"verbose":true},"denoify":{"out":"./deno"},"_id":"leac@0.7.0-preview.1","gitHead":"204dc466467cba463c19dd1c1ca9826ac33e1bc7","_nodeVersion":"20.18.0","_npmVersion":"10.8.2","dist":{"integrity":"sha512-KqVp4lr3CQTgVZ262AWN4znIFKmiyFicAU6h848aPuAJl0MpoZ2fkJu1PHTIzMl4OeGXeiZC5v2xc4Dy5vNeFg==","shasum":"77934d066b0d3e5cecd9c7fa34954111e880fc65","tarball":"https://registry.npmjs.org/leac/-/leac-0.7.0-preview.1.tgz","fileCount":7,"unpackedSize":32921,"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEQCIBBL1z1xpYfmARiWkpaInRLMTdPJFTfrKx6R1IU9xEYCAiACwiHwtBIV+W6CHoPFobeRei4Hd8img1pHNl4tbtk7vQ=="}]},"_npmUser":{"name":"killy.mxi","email":"killy.mxi@gmail.com"},"directories":{},"maintainers":[{"name":"killy.mxi","email":"killy.mxi@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/leac_0.7.0-preview.1_1740487623563_0.24433060569999387"},"_hasShrinkwrap":false}},"time":{"created":"2021-10-26T12:56:50.014Z","modified":"2025-02-25T12:47:03.985Z","0.5.0":"2021-10-26T12:56:50.161Z","0.5.1":"2022-01-28T13:33:25.355Z","0.6.0":"2022-08-18T18:17:37.146Z","0.7.0-preview.1":"2025-02-25T12:47:03.798Z"},"bugs":{"url":"https://github.com/mxxii/leac/issues"},"author":{"name":"KillyMXI"},"license":"MIT","homepage":"https://github.com/mxxii/leac","keywords":["lexer","tokenizer","lex","token"],"repository":{"type":"git","url":"git+https://github.com/mxxii/leac.git"},"description":"Lexer / tokenizer","maintainers":[{"name":"killy.mxi","email":"killy.mxi@gmail.com"}],"readme":"# leac\n\n![lint status badge](https://github.com/mxxii/leac/workflows/lint/badge.svg)\n![test status badge](https://github.com/mxxii/leac/workflows/test/badge.svg)\n![test coverage badge](https://img.shields.io/nycrc/mxxii/leac?config=.c8rc.json)\n[![License: MIT](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/mxxii/leac/blob/main/LICENSE)\n[![npm](https://img.shields.io/npm/v/leac?logo=npm)](https://www.npmjs.com/package/leac)\n[![npm](https://img.shields.io/npm/dw/leac?color=informational&logo=npm)](https://www.npmjs.com/package/leac)\n[![deno](https://img.shields.io/badge/deno.land%2Fx%2F-leac-informational?logo=deno)](https://deno.land/x/leac)\n\nLexer / tokenizer.\n\n\n## Features\n\n- **Lightweight**. Zero dependencies. Not a lot of code.\n\n- **Well tested** - comes will tests for everything including examples.\n\n- **Compact syntax** - less boilerplate. Rule name is enough when it is the same as the lookup string.\n\n- **No failures** - it just stops when there are no matching rules and returns the information about whether it completed and where it stopped in addition to tokens array.\n\n- **Composable lexers** - instead of states within a lexer.\n\n- **Stateless lexers** - all inputs are passed as arguments, all outputs are returned in a result object.\n\n- **No streaming** - accepts a string at a time (more on this below).\n\n- **Only text tokens, no arbitrary values**. It seems to be a good habit to have tokens that are *trivially* serializable back into a valid input string. Don't do the parser's job. There are a couple of convenience features such as the ability to discard matches or string replacements for regular expression rules but that has to be used mindfully (more on this below).\n\n- Pairs well with [peberminta](https://github.com/mxxii/peberminta) – parser combinators toolkit.\n\n\n## Changelog\n\nAvailable here: [CHANGELOG.md](https://github.com/mxxii/leac/blob/main/CHANGELOG.md)\n\n\n## Install\n\n### Node\n\n```shell\n> npm i leac\n> yarn add leac\n```\n\n```ts\nimport { createLexer, Token } from 'leac';\n```\n\n### Deno\n\n```ts\nimport { createLexer, Token } from 'https://deno.land/x/leac@.../leac.ts';\n```\n\n\n## Examples\n\n```typescript\nconst lex = createLexer([\n  { name: '-', str: '-' },\n  { name: '+' },\n  { name: 'ws', regex: /\\s+/, discard: true },\n  { name: 'number', regex: /[0-9]|[1-9][0-9]+/ },\n]);\n\nconst { tokens, offset, complete } = lex('2 + 2');\n```\n\n- [JSON](https://github.com/mxxii/leac/blob/main/examples/json.ts) ([output snapshot](https://github.com/mxxii/leac/blob/main/test/snapshots/examples.ts.md#json));\n- [Calc](https://github.com/mxxii/leac/blob/main/examples/calc.ts) ([output snapshot](https://github.com/mxxii/leac/blob/main/test/snapshots/examples.ts.md#calc));\n- [User-provided examples](https://github.com/mxxii/leac/issues?q=label%3Aexample);\n- *feel free to post or PR interesting compact grammar examples.*\n\n### Published packages using `leac`\n\n- [parseley](https://github.com/mxxii/parseley) - CSS selectors parser\n\n\n## API\n\n- [v0.7.0-preview.1](https://github.com/mxxii/leac/blob/main/docs/index.md)\n- [v0.6.0](https://github.com/mxxii/leac/blob/v0.6.0/docs/index.md)\n\n\n## Lexer design notes\n\n\n### Tokens are atoms\n\nDon't try to pack as much as possible into a token. If you can identify actually atomic, indivisible parts of the grammar - it will be easier to work with them in the parser.\n\nIf you're\n\n- defining a very long regular expression in a token,\n- defining multiple tokens that have a notable common part,\n- breaking down a token into parts in the parser\n\nthen your tokens might be too big.\n\n\n### On rewriting tokens\n\nIt is often really tempting to rewrite a token on the go. But it can be dangerous unless you are absolutely mindful of all edge cases.\n\nFor example, who needs to carry string quotes around, right? Parser will only need the string content...\n\nWe'll have to consider following things:\n\n- Regular expressions. Sometimes we want to match strings that can have a length *from zero* and up.\n\n- Tokens are not produced without changing the offset. If something is missing - there is no token.\n\n  If we allow a token with zero length - it will cause an infinite loop, as the same rule will be matched at the same offset, again and again.\n\n- Discardable tokens - a convenience feature that may seem harmless at a first glance.\n\nWhen put together, these things plus some intuition traps can lead to a broken array of tokens.\n\nStrings can be empty, which means the token can be absent. With no content and no quotes the tokens array will most likely make no sense for a parser.\n\nHow to avoid potential issues:\n\n- Don't discard anything that you may need to insert back if you try to immediately serialize the tokens array to string. This means whitespace are usually safe to discard while string quotes are not (what can be considered safe will heavily depend on the grammar - you may have a language with significant spaces and insignificant quotes...);\n\n- You can introduce a higher priority rule to capture an empty string (opening quote immediately followed by closing quote) and emit a special token for that. This way empty string between quotes can't occur down the line;\n\n- Match the whole string (content and quotes) with a single regular expression, let the parser deal with it. This can actually lead to a cleaner design than trying to be clever and removing \"unnecessary\" parts early;\n\n- Match the whole string (content and quotes) with a single regular expression, use capture groups and [replace](https://github.com/mxxii/leac/blob/main/docs/interfaces/ReplacementRule.md#properties) property. This can produce a non-zero length token with empty text.\n\nAnother note about quotes: If the grammar allows for different quotes and you're still willing to get rid of them early - think how you're going to unescape the string later. Make sure you carry the information about the exact string kind in the token name at least - you will need it later.\n\n\n## Performance\n\nInternal benchmarks are [available](https://github.com/mxxii/leac/tree/main/benchmarks).\n\n\n```\n> tsimp ./benchmarks/benchmark.ts\n\n[ISOBENCH ENDED] IsoBench\n[GROUP ENDED] effect of stacking\nwithout stacking                   - 432 177 op/s. 50 samples in 5343 ms. 1.000x (WORST)\nwith stacking                      - 517 294 op/s. 50 samples in 5294 ms. 1.197x (BEST)\n[GROUP ENDED] effect of replacement\nwithout replacement                - 652 823 op/s. 50 samples in 5366 ms. 1.993x (BEST)\nwith replacement                   - 327 504 op/s. 50 samples in 5311 ms. 1.000x (WORST)\n[GROUP ENDED] effect of line numbers\nwithout line numbers               - 687 916 op/s. 50 samples in 5299 ms. 1.885x (BEST)\nwith line numbers                  - 364 998 op/s. 50 samples in 5343 ms. 1.000x (WORST)\n[GROUP ENDED] effect of rule type\nby names                           - 610 921 op/s. 50 samples in 5304 ms. 1.047x\nby strings                         - 595 716 op/s. 50 samples in 5431 ms. 1.021x\nby non-sticky regexes              - 583 369 op/s. 50 samples in 5344 ms. 1.000x (WORST)\nby sticky regexes                  - 601 227 op/s. 50 samples in 5321 ms. 1.031x\nby combined regex                  - 719 475 op/s. 50 samples in 5348 ms. 1.233x (BEST)\n[GROUP ENDED] constructing, not running\nfrom name                          - 697 850 op/s. 50 samples in 5297 ms. 1.022x\nfrom string                        - 683 054 op/s. 50 samples in 5276 ms. 1.000x (WORST)\nfrom non-sticky regex              - 1 390 579 op/s. 50 samples in 5252 ms. 2.036x\nfrom sticky regex                  - 5 697 033 op/s. 50 samples in 5265 ms. 8.341x (BEST)\nfrom non-sticky regex with replace - 1 311 587 op/s. 50 samples in 5350 ms. 1.920x\nfrom sticky regex with replace     - 926 344 op/s. 50 samples in 5261 ms. 1.356x\n```\n\nTrivial observations:\n\n- stacking lexers reduces the number of rules in each lexer and speeds things up a bit;\n- replacement and line numbers have runtime costs;\n- all rule types perform the same on the same trivial matches (converted to the same representation internally);\n  - combining same name rules in one regular expression rule can give slight performance boost by the cost of readability;\n- constructing from sticky regular expressions (with `y` flag) is the cheapest, as long as you don't need replacement feature;\n  - lexers aren't something you'd be constructing in volumes that make this matter, so this is a curiosity, it shouldn't be prioritized over code readability;\n\nI have no benchmark comparing with other lexers/tokenizers. I'd be grateful to anyone who can provide a good benchmark project to compare different lexers on similar tasks.\n\nShoutout to <https://github.com/Llorx/iso-bench>.\n\n\n## What about ...?\n\n- stable release - Current release is well thought out and tested. I leave a chance that some changes might be needed based on feedback. Before version 1.0.0 this will be done without a deprecation cycle.\n\n- streaming - I have no use case for it - majority of practical scenarios have reasonable input size and there is no need to pay with the complexity. I may think about it again once I see a good use case.\n\n\n## Some other lexer / tokenizer packages\n\n- [moo](https://github.com/no-context/moo);\n- [doken](https://github.com/yishn/doken);\n- [tokenizr](https://github.com/rse/tokenizr);\n- [flex-js](https://github.com/sormy/flex-js);\n- *and more, with varied level of maintenance.*\n","readmeFilename":"README.md"}